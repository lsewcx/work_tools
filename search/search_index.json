{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"index.html","text":"\u6b22\u8fce\u4f7f\u7528work_tools \u8fd9\u91cc\u6709\u7740\u5f88\u591a\u5de5\u4f5c\u65f6\u5019\u5e38\u7528\u7684\u4e00\u4e9b\u5c0f\u5de5\u5177\uff0c\u5982\u4f55\u4f60\u4e5f\u559c\u6b22\u7684\u8bdd\u8bf7\u70b9\u4e2astar\ud83c\udf1f \u5982\u679c\u6ca1\u6709\u4f60\u8981\u7684\u5de5\u5177\u53ef\u4ee5\u63d0issue\u6216\u81ea\u5df1\u5f00\u53d1\u8fdb\u884c\u8d21\u732e","title":"\u6b22\u8fce\u4f7f\u7528work_tools"},{"location":"index.html#work_tools","text":"\u8fd9\u91cc\u6709\u7740\u5f88\u591a\u5de5\u4f5c\u65f6\u5019\u5e38\u7528\u7684\u4e00\u4e9b\u5c0f\u5de5\u5177\uff0c\u5982\u4f55\u4f60\u4e5f\u559c\u6b22\u7684\u8bdd\u8bf7\u70b9\u4e2astar\ud83c\udf1f \u5982\u679c\u6ca1\u6709\u4f60\u8981\u7684\u5de5\u5177\u53ef\u4ee5\u63d0issue\u6216\u81ea\u5df1\u5f00\u53d1\u8fdb\u884c\u8d21\u732e","title":"\u6b22\u8fce\u4f7f\u7528work_tools"},{"location":"development.html","text":"\u8d21\u732e\u6307\u5357 \u542f\u52a8\u9879\u76ee \u514b\u9686\u9879\u76ee \u9996\u5148\uff0c\u514b\u9686\u9879\u76ee\u5230\u672c\u5730\uff1a git clone https://github.com/lsewcx/work_tools.git cd work_tools \u5b89\u88c5 \u4f7f\u7528 conda \u521b\u5efa\u4e00\u4e2a python3.9 \u7248\u672c\u7684\u73af\u5883 pip install -U poetry poetry install -v \u5982\u679c\u4f60\u9700\u8981\u6dfb\u52a0\u5e93\u8bf7\u4f7f\u7528 poetry add [\u5e93\u540d\u5b57] \u8d21\u732e \u5199\u5b8c\u4ee3\u7801\u540e\u5728\u9879\u76ee\u6839\u76ee\u5f55\u8fd0\u884c isort \u5bf9\u5bfc\u5165\u8fdb\u884c\u683c\u5f0f\u5316 isort . \u5728\u9879\u76ee\u6839\u76ee\u5f55\u8fd0\u884c pylint \u68c0\u67e5\u4ee3\u7801\u662f\u5426\u89c4\u8303\uff0c\u662f\u5426\u7b26\u5408 PEP8 \u6807\u51c6\u3002 pylint tests src \u8fdb\u884c\u6d4b\u8bd5\u77e5\u9053\u4ee3\u7801\u6ca1\u6709\u95ee\u9898\u4e86 pytest \u6587\u6863 \u5982\u679c\u4f60\u6dfb\u52a0\u7684\u662f\u65b0\u529f\u80fd\uff0c\u7f16\u5199 markdown \u6587\u4ef6\u53c2\u7167\u522b\u7684 markdown \u7684\u6807\u51c6\u4f1a\u901a\u8fc7\u51fd\u6570\u7684\u6ce8\u91ca\u81ea\u52a8\u751f\u6210\u6587\u6863 \u4e0a\u4f20 git cz git push \u5e38\u89c1\u95ee\u9898 windows \u5e73\u53f0 \u7ecf\u8fc7\u6d4b\u8bd5 mac \u5e73\u53f0\u53ef\u4ee5\u76f4\u63a5\u8f93\u5165 mkdocs serve windows \u5e73\u53f0\u5982\u679c\u65e0\u6548\u8bf7\u4f7f\u7528 poetry run mkdocs serve","title":"\u8d21\u732e\u6307\u5357"},{"location":"development.html#_1","text":"","title":"\u8d21\u732e\u6307\u5357"},{"location":"development.html#_2","text":"","title":"\u542f\u52a8\u9879\u76ee"},{"location":"development.html#_3","text":"\u9996\u5148\uff0c\u514b\u9686\u9879\u76ee\u5230\u672c\u5730\uff1a git clone https://github.com/lsewcx/work_tools.git cd work_tools","title":"\u514b\u9686\u9879\u76ee"},{"location":"development.html#_4","text":"\u4f7f\u7528 conda \u521b\u5efa\u4e00\u4e2a python3.9 \u7248\u672c\u7684\u73af\u5883 pip install -U poetry poetry install -v \u5982\u679c\u4f60\u9700\u8981\u6dfb\u52a0\u5e93\u8bf7\u4f7f\u7528 poetry add [\u5e93\u540d\u5b57]","title":"\u5b89\u88c5"},{"location":"development.html#_5","text":"","title":"\u8d21\u732e"},{"location":"development.html#isort","text":"isort .","title":"\u5199\u5b8c\u4ee3\u7801\u540e\u5728\u9879\u76ee\u6839\u76ee\u5f55\u8fd0\u884c isort \u5bf9\u5bfc\u5165\u8fdb\u884c\u683c\u5f0f\u5316"},{"location":"development.html#pylint-pep8","text":"pylint tests src","title":"\u5728\u9879\u76ee\u6839\u76ee\u5f55\u8fd0\u884c pylint \u68c0\u67e5\u4ee3\u7801\u662f\u5426\u89c4\u8303\uff0c\u662f\u5426\u7b26\u5408 PEP8 \u6807\u51c6\u3002"},{"location":"development.html#_6","text":"pytest","title":"\u8fdb\u884c\u6d4b\u8bd5\u77e5\u9053\u4ee3\u7801\u6ca1\u6709\u95ee\u9898\u4e86"},{"location":"development.html#_7","text":"\u5982\u679c\u4f60\u6dfb\u52a0\u7684\u662f\u65b0\u529f\u80fd\uff0c\u7f16\u5199 markdown \u6587\u4ef6\u53c2\u7167\u522b\u7684 markdown \u7684\u6807\u51c6\u4f1a\u901a\u8fc7\u51fd\u6570\u7684\u6ce8\u91ca\u81ea\u52a8\u751f\u6210\u6587\u6863","title":"\u6587\u6863"},{"location":"development.html#_8","text":"git cz git push","title":"\u4e0a\u4f20"},{"location":"development.html#_9","text":"","title":"\u5e38\u89c1\u95ee\u9898"},{"location":"development.html#windows","text":"\u7ecf\u8fc7\u6d4b\u8bd5 mac \u5e73\u53f0\u53ef\u4ee5\u76f4\u63a5\u8f93\u5165 mkdocs serve windows \u5e73\u53f0\u5982\u679c\u65e0\u6548\u8bf7\u4f7f\u7528 poetry run mkdocs serve","title":"windows \u5e73\u53f0"},{"location":"folder/folder_file_counter.html","text":"\u7528\u4e8e\u7edf\u8ba1\u6307\u5b9a\u76ee\u5f55\u4e0b\u7684\u6587\u4ef6\u6570\u91cf\u3002 Source code in src/work_tools/folder/folder_file_counter.py 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 class FileCounter : \"\"\" \u7528\u4e8e\u7edf\u8ba1\u6307\u5b9a\u76ee\u5f55\u4e0b\u7684\u6587\u4ef6\u6570\u91cf\u3002 \"\"\" def __init__ ( self ) -> None : \"\"\" \u521d\u59cb\u5316 FileCounter \u5b9e\u4f8b\u3002 \"\"\" def __doc__ ( self ): print ( self . __doc__ ) def count_files ( self , folder_path : str , file_extension : Union [ str , List [ str ], Optional [ str ]] = None , recursive : bool = False ) -> None : \"\"\" \u7edf\u8ba1\u6307\u5b9a\u76ee\u5f55\u4e0b\u7684\u6587\u4ef6\u6570\u91cf\u3002 Args: folder_path (str): \u8981\u7edf\u8ba1\u6587\u4ef6\u7684\u76ee\u5f55\u8def\u5f84\u3002 file_extension (Union[str, List[str], Optional[str]], optional): \u6307\u5b9a\u8981\u7edf\u8ba1\u7684\u6587\u4ef6\u6269\u5c55\u540d\u3002 \u53ef\u4ee5\u662f\u5355\u4e2a\u6269\u5c55\u540d\u7684\u5b57\u7b26\u4e32\uff0c\u4e5f\u53ef\u4ee5\u662f\u5305\u542b\u591a\u4e2a\u6269\u5c55\u540d\u7684\u5217\u8868\u3002\u5982\u679c\u4e0d\u63d0\u4f9b\u6b64\u53c2\u6570\uff0c\u5c06\u7edf\u8ba1\u6240\u6709\u6587\u4ef6\u3002 recursive (bool, optional): \u6307\u793a\u662f\u5426\u9012\u5f52\u7edf\u8ba1\u5b50\u76ee\u5f55\u4e2d\u7684\u6587\u4ef6\u3002\u9ed8\u8ba4\u4e3a False\uff0c\u5373\u4e0d\u9012\u5f52\u3002 Example: ```python # \u521b\u5efa FileCounter \u5b9e\u4f8b file_counter = FileCounter() # \u7edf\u8ba1\u5f53\u524d\u76ee\u5f55\u4e0b\u6240\u6709\u6587\u4ef6\u7684\u6570\u91cf file_counter.count_files('.') # \u7edf\u8ba1\u5f53\u524d\u76ee\u5f55\u4e0b\u6240\u6709 .py \u6587\u4ef6\u7684\u6570\u91cf file_counter.count_files('.', file_extension='.py') # \u9012\u5f52\u7edf\u8ba1\u5f53\u524d\u76ee\u5f55\u53ca\u6240\u6709\u5b50\u76ee\u5f55\u4e0b\u6240\u6709 .py \u548c .txt \u6587\u4ef6\u7684\u6570\u91cf file_counter.count_files('.', file_extension=['.py', '.txt'], recursive=True) ``` \"\"\" counter = Counter () if isinstance ( file_extension , str ): file_extension = [ file_extension ] for _ , dirs , files in os . walk ( folder_path ): # \u4f7f\u7528 _ \u66ff\u6362\u672a\u4f7f\u7528\u7684\u53d8\u91cf root if not recursive : dirs . clear () for file in files : if file_extension is None or any ( file . endswith ( ext ) for ext in file_extension ): ext = os . path . splitext ( file )[ 1 ] counter [ ext ] += 1 total_files = sum ( counter . values ()) logger . info ( f \"\u603b\u6587\u4ef6\u6570\u91cf: { total_files } \" ) for ext , count in counter . items (): logger . info ( f \" { ext } \u540e\u7f00\u7684\u6587\u4ef6\u6570\u91cf: { count } \" ) def count_files_dict ( self , folder_path : str , file_extension : Union [ str , List [ str ], Optional [ str ]] = None , recursive : bool = False ) -> dict : \"\"\" \u7edf\u8ba1\u6307\u5b9a\u76ee\u5f55\u4e0b\u7684\u6587\u4ef6\u6570\u91cf\uff0c\u5e76\u4ee5\u5b57\u5178\u5f62\u5f0f\u8fd4\u56de\u3002 Args: folder_path (str): \u8981\u7edf\u8ba1\u6587\u4ef6\u7684\u76ee\u5f55\u8def\u5f84\u3002 file_extension (Union[str, List[str], Optional[str]], optional): \u6307\u5b9a\u8981\u7edf\u8ba1\u7684\u6587\u4ef6\u6269\u5c55\u540d\u3002 \u53ef\u4ee5\u662f\u5355\u4e2a\u6269\u5c55\u540d\u7684\u5b57\u7b26\u4e32\uff0c\u4e5f\u53ef\u4ee5\u662f\u5305\u542b\u591a\u4e2a\u6269\u5c55\u540d\u7684\u5217\u8868\u3002\u5982\u679c\u4e0d\u63d0\u4f9b\u6b64\u53c2\u6570\uff0c\u5c06\u7edf\u8ba1\u6240\u6709\u6587\u4ef6\u3002 recursive (bool, optional): \u6307\u793a\u662f\u5426\u9012\u5f52\u7edf\u8ba1\u5b50\u76ee\u5f55\u4e2d\u7684\u6587\u4ef6\u3002\u9ed8\u8ba4\u4e3a False\uff0c\u5373\u4e0d\u9012\u5f52\u3002 Returns: dict: \u4e00\u4e2a\u5b57\u5178\uff0c\u952e\u4e3a\u6587\u4ef6\u6269\u5c55\u540d\uff0c\u503c\u4e3a\u5bf9\u5e94\u6269\u5c55\u540d\u7684\u6587\u4ef6\u6570\u91cf\u3002 Example: \u8fd4\u56de\u503c\u4f8b\u5982 ```python { \".txt\": 2, \".md\": 1 } ``` \"\"\" counter = Counter () if isinstance ( file_extension , str ): file_extension = [ file_extension ] for _ , dirs , files in os . walk ( folder_path ): if not recursive : dirs . clear () for file in files : if file_extension is None or any ( file . endswith ( ext ) for ext in file_extension ): ext = os . path . splitext ( file )[ 1 ] counter [ ext ] += 1 return dict ( counter ) __init__ () \u521d\u59cb\u5316 FileCounter \u5b9e\u4f8b\u3002 Source code in src/work_tools/folder/folder_file_counter.py 17 18 19 20 def __init__ ( self ) -> None : \"\"\" \u521d\u59cb\u5316 FileCounter \u5b9e\u4f8b\u3002 \"\"\" count_files ( folder_path , file_extension = None , recursive = False ) \u7edf\u8ba1\u6307\u5b9a\u76ee\u5f55\u4e0b\u7684\u6587\u4ef6\u6570\u91cf\u3002 Parameters: Name Type Description Default folder_path str \u8981\u7edf\u8ba1\u6587\u4ef6\u7684\u76ee\u5f55\u8def\u5f84\u3002 required file_extension Union [ str , List [ str ], Optional [ str ]] \u6307\u5b9a\u8981\u7edf\u8ba1\u7684\u6587\u4ef6\u6269\u5c55\u540d\u3002 \u53ef\u4ee5\u662f\u5355\u4e2a\u6269\u5c55\u540d\u7684\u5b57\u7b26\u4e32\uff0c\u4e5f\u53ef\u4ee5\u662f\u5305\u542b\u591a\u4e2a\u6269\u5c55\u540d\u7684\u5217\u8868\u3002\u5982\u679c\u4e0d\u63d0\u4f9b\u6b64\u53c2\u6570\uff0c\u5c06\u7edf\u8ba1\u6240\u6709\u6587\u4ef6\u3002 None recursive bool \u6307\u793a\u662f\u5426\u9012\u5f52\u7edf\u8ba1\u5b50\u76ee\u5f55\u4e2d\u7684\u6587\u4ef6\u3002\u9ed8\u8ba4\u4e3a False\uff0c\u5373\u4e0d\u9012\u5f52\u3002 False Example # \u521b\u5efa FileCounter \u5b9e\u4f8b file_counter = FileCounter() # \u7edf\u8ba1\u5f53\u524d\u76ee\u5f55\u4e0b\u6240\u6709\u6587\u4ef6\u7684\u6570\u91cf file_counter.count_files('.') # \u7edf\u8ba1\u5f53\u524d\u76ee\u5f55\u4e0b\u6240\u6709 .py \u6587\u4ef6\u7684\u6570\u91cf file_counter.count_files('.', file_extension='.py') # \u9012\u5f52\u7edf\u8ba1\u5f53\u524d\u76ee\u5f55\u53ca\u6240\u6709\u5b50\u76ee\u5f55\u4e0b\u6240\u6709 .py \u548c .txt \u6587\u4ef6\u7684\u6570\u91cf file_counter.count_files('.', file_extension=['.py', '.txt'], recursive=True) Source code in src/work_tools/folder/folder_file_counter.py 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 def count_files ( self , folder_path : str , file_extension : Union [ str , List [ str ], Optional [ str ]] = None , recursive : bool = False ) -> None : \"\"\" \u7edf\u8ba1\u6307\u5b9a\u76ee\u5f55\u4e0b\u7684\u6587\u4ef6\u6570\u91cf\u3002 Args: folder_path (str): \u8981\u7edf\u8ba1\u6587\u4ef6\u7684\u76ee\u5f55\u8def\u5f84\u3002 file_extension (Union[str, List[str], Optional[str]], optional): \u6307\u5b9a\u8981\u7edf\u8ba1\u7684\u6587\u4ef6\u6269\u5c55\u540d\u3002 \u53ef\u4ee5\u662f\u5355\u4e2a\u6269\u5c55\u540d\u7684\u5b57\u7b26\u4e32\uff0c\u4e5f\u53ef\u4ee5\u662f\u5305\u542b\u591a\u4e2a\u6269\u5c55\u540d\u7684\u5217\u8868\u3002\u5982\u679c\u4e0d\u63d0\u4f9b\u6b64\u53c2\u6570\uff0c\u5c06\u7edf\u8ba1\u6240\u6709\u6587\u4ef6\u3002 recursive (bool, optional): \u6307\u793a\u662f\u5426\u9012\u5f52\u7edf\u8ba1\u5b50\u76ee\u5f55\u4e2d\u7684\u6587\u4ef6\u3002\u9ed8\u8ba4\u4e3a False\uff0c\u5373\u4e0d\u9012\u5f52\u3002 Example: ```python # \u521b\u5efa FileCounter \u5b9e\u4f8b file_counter = FileCounter() # \u7edf\u8ba1\u5f53\u524d\u76ee\u5f55\u4e0b\u6240\u6709\u6587\u4ef6\u7684\u6570\u91cf file_counter.count_files('.') # \u7edf\u8ba1\u5f53\u524d\u76ee\u5f55\u4e0b\u6240\u6709 .py \u6587\u4ef6\u7684\u6570\u91cf file_counter.count_files('.', file_extension='.py') # \u9012\u5f52\u7edf\u8ba1\u5f53\u524d\u76ee\u5f55\u53ca\u6240\u6709\u5b50\u76ee\u5f55\u4e0b\u6240\u6709 .py \u548c .txt \u6587\u4ef6\u7684\u6570\u91cf file_counter.count_files('.', file_extension=['.py', '.txt'], recursive=True) ``` \"\"\" counter = Counter () if isinstance ( file_extension , str ): file_extension = [ file_extension ] for _ , dirs , files in os . walk ( folder_path ): # \u4f7f\u7528 _ \u66ff\u6362\u672a\u4f7f\u7528\u7684\u53d8\u91cf root if not recursive : dirs . clear () for file in files : if file_extension is None or any ( file . endswith ( ext ) for ext in file_extension ): ext = os . path . splitext ( file )[ 1 ] counter [ ext ] += 1 total_files = sum ( counter . values ()) logger . info ( f \"\u603b\u6587\u4ef6\u6570\u91cf: { total_files } \" ) for ext , count in counter . items (): logger . info ( f \" { ext } \u540e\u7f00\u7684\u6587\u4ef6\u6570\u91cf: { count } \" ) count_files_dict ( folder_path , file_extension = None , recursive = False ) \u7edf\u8ba1\u6307\u5b9a\u76ee\u5f55\u4e0b\u7684\u6587\u4ef6\u6570\u91cf\uff0c\u5e76\u4ee5\u5b57\u5178\u5f62\u5f0f\u8fd4\u56de\u3002 Parameters: Name Type Description Default folder_path str \u8981\u7edf\u8ba1\u6587\u4ef6\u7684\u76ee\u5f55\u8def\u5f84\u3002 required file_extension Union [ str , List [ str ], Optional [ str ]] \u6307\u5b9a\u8981\u7edf\u8ba1\u7684\u6587\u4ef6\u6269\u5c55\u540d\u3002 \u53ef\u4ee5\u662f\u5355\u4e2a\u6269\u5c55\u540d\u7684\u5b57\u7b26\u4e32\uff0c\u4e5f\u53ef\u4ee5\u662f\u5305\u542b\u591a\u4e2a\u6269\u5c55\u540d\u7684\u5217\u8868\u3002\u5982\u679c\u4e0d\u63d0\u4f9b\u6b64\u53c2\u6570\uff0c\u5c06\u7edf\u8ba1\u6240\u6709\u6587\u4ef6\u3002 None recursive bool \u6307\u793a\u662f\u5426\u9012\u5f52\u7edf\u8ba1\u5b50\u76ee\u5f55\u4e2d\u7684\u6587\u4ef6\u3002\u9ed8\u8ba4\u4e3a False\uff0c\u5373\u4e0d\u9012\u5f52\u3002 False Returns: Name Type Description dict dict \u4e00\u4e2a\u5b57\u5178\uff0c\u952e\u4e3a\u6587\u4ef6\u6269\u5c55\u540d\uff0c\u503c\u4e3a\u5bf9\u5e94\u6269\u5c55\u540d\u7684\u6587\u4ef6\u6570\u91cf\u3002 Example \u8fd4\u56de\u503c\u4f8b\u5982 { \".txt\": 2, \".md\": 1 } Source code in src/work_tools/folder/folder_file_counter.py 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 def count_files_dict ( self , folder_path : str , file_extension : Union [ str , List [ str ], Optional [ str ]] = None , recursive : bool = False ) -> dict : \"\"\" \u7edf\u8ba1\u6307\u5b9a\u76ee\u5f55\u4e0b\u7684\u6587\u4ef6\u6570\u91cf\uff0c\u5e76\u4ee5\u5b57\u5178\u5f62\u5f0f\u8fd4\u56de\u3002 Args: folder_path (str): \u8981\u7edf\u8ba1\u6587\u4ef6\u7684\u76ee\u5f55\u8def\u5f84\u3002 file_extension (Union[str, List[str], Optional[str]], optional): \u6307\u5b9a\u8981\u7edf\u8ba1\u7684\u6587\u4ef6\u6269\u5c55\u540d\u3002 \u53ef\u4ee5\u662f\u5355\u4e2a\u6269\u5c55\u540d\u7684\u5b57\u7b26\u4e32\uff0c\u4e5f\u53ef\u4ee5\u662f\u5305\u542b\u591a\u4e2a\u6269\u5c55\u540d\u7684\u5217\u8868\u3002\u5982\u679c\u4e0d\u63d0\u4f9b\u6b64\u53c2\u6570\uff0c\u5c06\u7edf\u8ba1\u6240\u6709\u6587\u4ef6\u3002 recursive (bool, optional): \u6307\u793a\u662f\u5426\u9012\u5f52\u7edf\u8ba1\u5b50\u76ee\u5f55\u4e2d\u7684\u6587\u4ef6\u3002\u9ed8\u8ba4\u4e3a False\uff0c\u5373\u4e0d\u9012\u5f52\u3002 Returns: dict: \u4e00\u4e2a\u5b57\u5178\uff0c\u952e\u4e3a\u6587\u4ef6\u6269\u5c55\u540d\uff0c\u503c\u4e3a\u5bf9\u5e94\u6269\u5c55\u540d\u7684\u6587\u4ef6\u6570\u91cf\u3002 Example: \u8fd4\u56de\u503c\u4f8b\u5982 ```python { \".txt\": 2, \".md\": 1 } ``` \"\"\" counter = Counter () if isinstance ( file_extension , str ): file_extension = [ file_extension ] for _ , dirs , files in os . walk ( folder_path ): if not recursive : dirs . clear () for file in files : if file_extension is None or any ( file . endswith ( ext ) for ext in file_extension ): ext = os . path . splitext ( file )[ 1 ] counter [ ext ] += 1 return dict ( counter )","title":"Folder file counter"},{"location":"folder/folder_file_counter.html#work_tools.folder.folder_file_counter.FileCounter.__init__","text":"\u521d\u59cb\u5316 FileCounter \u5b9e\u4f8b\u3002 Source code in src/work_tools/folder/folder_file_counter.py 17 18 19 20 def __init__ ( self ) -> None : \"\"\" \u521d\u59cb\u5316 FileCounter \u5b9e\u4f8b\u3002 \"\"\"","title":"__init__"},{"location":"folder/folder_file_counter.html#work_tools.folder.folder_file_counter.FileCounter.count_files","text":"\u7edf\u8ba1\u6307\u5b9a\u76ee\u5f55\u4e0b\u7684\u6587\u4ef6\u6570\u91cf\u3002 Parameters: Name Type Description Default folder_path str \u8981\u7edf\u8ba1\u6587\u4ef6\u7684\u76ee\u5f55\u8def\u5f84\u3002 required file_extension Union [ str , List [ str ], Optional [ str ]] \u6307\u5b9a\u8981\u7edf\u8ba1\u7684\u6587\u4ef6\u6269\u5c55\u540d\u3002 \u53ef\u4ee5\u662f\u5355\u4e2a\u6269\u5c55\u540d\u7684\u5b57\u7b26\u4e32\uff0c\u4e5f\u53ef\u4ee5\u662f\u5305\u542b\u591a\u4e2a\u6269\u5c55\u540d\u7684\u5217\u8868\u3002\u5982\u679c\u4e0d\u63d0\u4f9b\u6b64\u53c2\u6570\uff0c\u5c06\u7edf\u8ba1\u6240\u6709\u6587\u4ef6\u3002 None recursive bool \u6307\u793a\u662f\u5426\u9012\u5f52\u7edf\u8ba1\u5b50\u76ee\u5f55\u4e2d\u7684\u6587\u4ef6\u3002\u9ed8\u8ba4\u4e3a False\uff0c\u5373\u4e0d\u9012\u5f52\u3002 False Example # \u521b\u5efa FileCounter \u5b9e\u4f8b file_counter = FileCounter() # \u7edf\u8ba1\u5f53\u524d\u76ee\u5f55\u4e0b\u6240\u6709\u6587\u4ef6\u7684\u6570\u91cf file_counter.count_files('.') # \u7edf\u8ba1\u5f53\u524d\u76ee\u5f55\u4e0b\u6240\u6709 .py \u6587\u4ef6\u7684\u6570\u91cf file_counter.count_files('.', file_extension='.py') # \u9012\u5f52\u7edf\u8ba1\u5f53\u524d\u76ee\u5f55\u53ca\u6240\u6709\u5b50\u76ee\u5f55\u4e0b\u6240\u6709 .py \u548c .txt \u6587\u4ef6\u7684\u6570\u91cf file_counter.count_files('.', file_extension=['.py', '.txt'], recursive=True) Source code in src/work_tools/folder/folder_file_counter.py 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 def count_files ( self , folder_path : str , file_extension : Union [ str , List [ str ], Optional [ str ]] = None , recursive : bool = False ) -> None : \"\"\" \u7edf\u8ba1\u6307\u5b9a\u76ee\u5f55\u4e0b\u7684\u6587\u4ef6\u6570\u91cf\u3002 Args: folder_path (str): \u8981\u7edf\u8ba1\u6587\u4ef6\u7684\u76ee\u5f55\u8def\u5f84\u3002 file_extension (Union[str, List[str], Optional[str]], optional): \u6307\u5b9a\u8981\u7edf\u8ba1\u7684\u6587\u4ef6\u6269\u5c55\u540d\u3002 \u53ef\u4ee5\u662f\u5355\u4e2a\u6269\u5c55\u540d\u7684\u5b57\u7b26\u4e32\uff0c\u4e5f\u53ef\u4ee5\u662f\u5305\u542b\u591a\u4e2a\u6269\u5c55\u540d\u7684\u5217\u8868\u3002\u5982\u679c\u4e0d\u63d0\u4f9b\u6b64\u53c2\u6570\uff0c\u5c06\u7edf\u8ba1\u6240\u6709\u6587\u4ef6\u3002 recursive (bool, optional): \u6307\u793a\u662f\u5426\u9012\u5f52\u7edf\u8ba1\u5b50\u76ee\u5f55\u4e2d\u7684\u6587\u4ef6\u3002\u9ed8\u8ba4\u4e3a False\uff0c\u5373\u4e0d\u9012\u5f52\u3002 Example: ```python # \u521b\u5efa FileCounter \u5b9e\u4f8b file_counter = FileCounter() # \u7edf\u8ba1\u5f53\u524d\u76ee\u5f55\u4e0b\u6240\u6709\u6587\u4ef6\u7684\u6570\u91cf file_counter.count_files('.') # \u7edf\u8ba1\u5f53\u524d\u76ee\u5f55\u4e0b\u6240\u6709 .py \u6587\u4ef6\u7684\u6570\u91cf file_counter.count_files('.', file_extension='.py') # \u9012\u5f52\u7edf\u8ba1\u5f53\u524d\u76ee\u5f55\u53ca\u6240\u6709\u5b50\u76ee\u5f55\u4e0b\u6240\u6709 .py \u548c .txt \u6587\u4ef6\u7684\u6570\u91cf file_counter.count_files('.', file_extension=['.py', '.txt'], recursive=True) ``` \"\"\" counter = Counter () if isinstance ( file_extension , str ): file_extension = [ file_extension ] for _ , dirs , files in os . walk ( folder_path ): # \u4f7f\u7528 _ \u66ff\u6362\u672a\u4f7f\u7528\u7684\u53d8\u91cf root if not recursive : dirs . clear () for file in files : if file_extension is None or any ( file . endswith ( ext ) for ext in file_extension ): ext = os . path . splitext ( file )[ 1 ] counter [ ext ] += 1 total_files = sum ( counter . values ()) logger . info ( f \"\u603b\u6587\u4ef6\u6570\u91cf: { total_files } \" ) for ext , count in counter . items (): logger . info ( f \" { ext } \u540e\u7f00\u7684\u6587\u4ef6\u6570\u91cf: { count } \" )","title":"count_files"},{"location":"folder/folder_file_counter.html#work_tools.folder.folder_file_counter.FileCounter.count_files_dict","text":"\u7edf\u8ba1\u6307\u5b9a\u76ee\u5f55\u4e0b\u7684\u6587\u4ef6\u6570\u91cf\uff0c\u5e76\u4ee5\u5b57\u5178\u5f62\u5f0f\u8fd4\u56de\u3002 Parameters: Name Type Description Default folder_path str \u8981\u7edf\u8ba1\u6587\u4ef6\u7684\u76ee\u5f55\u8def\u5f84\u3002 required file_extension Union [ str , List [ str ], Optional [ str ]] \u6307\u5b9a\u8981\u7edf\u8ba1\u7684\u6587\u4ef6\u6269\u5c55\u540d\u3002 \u53ef\u4ee5\u662f\u5355\u4e2a\u6269\u5c55\u540d\u7684\u5b57\u7b26\u4e32\uff0c\u4e5f\u53ef\u4ee5\u662f\u5305\u542b\u591a\u4e2a\u6269\u5c55\u540d\u7684\u5217\u8868\u3002\u5982\u679c\u4e0d\u63d0\u4f9b\u6b64\u53c2\u6570\uff0c\u5c06\u7edf\u8ba1\u6240\u6709\u6587\u4ef6\u3002 None recursive bool \u6307\u793a\u662f\u5426\u9012\u5f52\u7edf\u8ba1\u5b50\u76ee\u5f55\u4e2d\u7684\u6587\u4ef6\u3002\u9ed8\u8ba4\u4e3a False\uff0c\u5373\u4e0d\u9012\u5f52\u3002 False Returns: Name Type Description dict dict \u4e00\u4e2a\u5b57\u5178\uff0c\u952e\u4e3a\u6587\u4ef6\u6269\u5c55\u540d\uff0c\u503c\u4e3a\u5bf9\u5e94\u6269\u5c55\u540d\u7684\u6587\u4ef6\u6570\u91cf\u3002 Example \u8fd4\u56de\u503c\u4f8b\u5982 { \".txt\": 2, \".md\": 1 } Source code in src/work_tools/folder/folder_file_counter.py 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 def count_files_dict ( self , folder_path : str , file_extension : Union [ str , List [ str ], Optional [ str ]] = None , recursive : bool = False ) -> dict : \"\"\" \u7edf\u8ba1\u6307\u5b9a\u76ee\u5f55\u4e0b\u7684\u6587\u4ef6\u6570\u91cf\uff0c\u5e76\u4ee5\u5b57\u5178\u5f62\u5f0f\u8fd4\u56de\u3002 Args: folder_path (str): \u8981\u7edf\u8ba1\u6587\u4ef6\u7684\u76ee\u5f55\u8def\u5f84\u3002 file_extension (Union[str, List[str], Optional[str]], optional): \u6307\u5b9a\u8981\u7edf\u8ba1\u7684\u6587\u4ef6\u6269\u5c55\u540d\u3002 \u53ef\u4ee5\u662f\u5355\u4e2a\u6269\u5c55\u540d\u7684\u5b57\u7b26\u4e32\uff0c\u4e5f\u53ef\u4ee5\u662f\u5305\u542b\u591a\u4e2a\u6269\u5c55\u540d\u7684\u5217\u8868\u3002\u5982\u679c\u4e0d\u63d0\u4f9b\u6b64\u53c2\u6570\uff0c\u5c06\u7edf\u8ba1\u6240\u6709\u6587\u4ef6\u3002 recursive (bool, optional): \u6307\u793a\u662f\u5426\u9012\u5f52\u7edf\u8ba1\u5b50\u76ee\u5f55\u4e2d\u7684\u6587\u4ef6\u3002\u9ed8\u8ba4\u4e3a False\uff0c\u5373\u4e0d\u9012\u5f52\u3002 Returns: dict: \u4e00\u4e2a\u5b57\u5178\uff0c\u952e\u4e3a\u6587\u4ef6\u6269\u5c55\u540d\uff0c\u503c\u4e3a\u5bf9\u5e94\u6269\u5c55\u540d\u7684\u6587\u4ef6\u6570\u91cf\u3002 Example: \u8fd4\u56de\u503c\u4f8b\u5982 ```python { \".txt\": 2, \".md\": 1 } ``` \"\"\" counter = Counter () if isinstance ( file_extension , str ): file_extension = [ file_extension ] for _ , dirs , files in os . walk ( folder_path ): if not recursive : dirs . clear () for file in files : if file_extension is None or any ( file . endswith ( ext ) for ext in file_extension ): ext = os . path . splitext ( file )[ 1 ] counter [ ext ] += 1 return dict ( counter )","title":"count_files_dict"}]}